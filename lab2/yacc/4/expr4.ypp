/*
该部分实现符号表，在第二步要求的基础上，实现功能更强的词法分析和语法分析程序，使之能支持变量，
修改词法分析程序，能识别变量（标识符）和 “=” 符号，修改语法分析器，使之能分析、翻译 “a=2” 形式的（或更复杂的，“a= 表达
式”）赋值语句
符号表的作用：
1、收集符号属性；（词法分析）
2、上下文语义的合法性检查的依据；（语法分析）
3、作为目标代码生成阶段地址分配的依据；（语义分析）
*/
%{
#include<stdio.h>
#include<stdlib.h>
#include<string>
#include<ctype.h>

#ifndef YYSTYPE
#define YYSTYPE double
//YYSTYPE用于确定$$变量类型，我们要翻译的结果是表达式值,所以类型是double
#include<iostream>
#include<map>
using namespace std;

#endif
int yylex();
extern int yyparse();
FILE* yyin;
void yyerror(const char* s);

//string为ID，int为对应的数组下标,
//这里不能用char*，如果传递的是char*，即地址的话，就会出现a=2;b=7;a的值变为7.000的情况
map<string, double> symbolTable; // 使用map直接存储变量名及其值
string currentID;// 用于存储当前识别的标识符
%}
//TODO:给每个符号定义一个单词类别

/* %union {
    double dval;
    char *sval;
} */
//似乎可以使用union，但是没有时间写了

%token ADD MINUS
%token MUL DIV
%token NUMBER
%token L_PAR R_PAR
%token EQUAL
%token ID


//声明运算符的左右结合性及优先级
%left ADD MINUS
%left MUL DIV
%right UMINUS         
%right L_PAR
%left R_PAR


//规则段：规则段部分为进行语法分析的部分，包括上下文无关文法及翻译模式，大括号内的部分即为语义动作。
//$$ 代表产生式左部的属性值，$n 为产生式右部第 n 个 token 的属性值
//注意运算符等终结符也计算其中，即，不止非终结符有属性值，终结符也有属性值。
%%
//lines用于处理多行输入，每行都是一个表达式。
//使用分号替换lines产生式中的\n,测试程序时简单表达式以分号结束而不是回车结束
//这样实现词法分析忽略回车
lines   :       lines expr ';' { printf("%f\n", $2); }
        |       lines stmt ';' { printf("%f\n", $2); }//stmt和expr计算的结果都要打印    
        |       lines ';'
        |
        ;

stmt    :       ID EQUAL expr { symbolTable[currentID] = $3; $$ = $3; }

//TODO:完善表达式的规则./
expr    :       expr ADD expr   { $$=$1+$3; }
        |       expr MINUS expr   { $$=$1-$3; }
        |       expr MUL expr   { $$=$1*$3; }
        |       expr DIV expr   { $$=$1/$3; } 
        |       L_PAR expr R_PAR { $$=$2; }
        |       MINUS expr %prec UMINUS   {$$=-$2;}
        //将NUMBER视为终结符，添加语义动作，将yylval的值赋给NUMBER的属性值
        |       NUMBER  {$$=$1;}
        |       ID { $$ = symbolTable[currentID]; }
        ;
//当词法分析器识别到一个数值时，它会返回一个代表该数值的token，通常命名为NUMBER
//同时，该数值会被存储在yylval中，这是YACC或Bison用来传递词法值的变量。
//NUMBER=yylval是隐式赋值给终结符的属性值$1，然后expr=NUMBER,也就是$$=$1，
//语义动作中不用再显式执行$$=yylval，如果什么都不写，其实yacc也会自动执行$$=$1
/*
NUMBER : '0' {$$=0.0;}
       | '1' {$$=1.0;}  
       | '2' {$$=2.0;}
       | '3' {$$=3.0;}
       | '4' {$$=4.0;}
       | '5' {$$=5.0;}
       | '6' {$$=6.0;}
       | '7' {$$=7.0;}
       | '8' {$$=8.0;}
       | '9' {$$=9.0;}    
*/
%%

// programs section

int yylex()
{
    int t;
    double numValue = 0; // 用于存储多位数字的值
    while(1){
        t=getchar();
        if(t==' '||t=='\t'||t=='\n'){
            //do noting 忽略空格，制表符,换行
        }
        else if(isdigit(t)){
            //TODO:解析多位数字返回数字类型 
            ungetc(t,stdin); //将刚刚读取的数字字符t推回到输入流stdin，读取整个数字时，这个字符不会被遗漏
            scanf("%lf",&numValue);// 读取多位数字
            yylval = numValue; // 将数字值存储在yylval中
            return NUMBER;
        }
        else if((t>='a'&&t<='z')||(t>='A'&&t<='Z')||(t=='_')){
            currentID.clear();
            while((t>='a'&&t<='z')||(t>='A'&&t<='Z')||(t=='_')||(isdigit(t)))
            {
                currentID.push_back(t);
                t = getchar();
            }
            ungetc(t, stdin);
            return ID;
        }
        else if(t=='+'){
            return ADD;
        }else if(t=='-'){
            return MINUS;
        }//TODO:识别其他符号
        else if(t=='*'){
            return MUL;
        }else if(t=='/'){
            return DIV;
        }else if(t=='('){
            return L_PAR;
        }else if(t==')'){
            return R_PAR;
        }else if(t=='='){
            return EQUAL;
        }
        else{
            return t;
        }
    }
}

// `main`函数将`yyin`设置为标准输入`stdin`，然后不断调用`yyparse`直到达到文件尾。这意味着此程序从标准输入读取数据，并为每一行计算结果。
int main(void)
{
    yyin=stdin;
    do{
        yyparse();
    }while(!feof(yyin));
    return 0;
}
//yyerror函数用于处理语法错误，当yacc生成的yyparse函数遇到错误时，它会调用这个函数。这里的实现简单地打印错误消息并退出。
void yyerror(const char* s){
    fprintf(stderr,"Parse error: %s\n",s);
    exit(1);
}
