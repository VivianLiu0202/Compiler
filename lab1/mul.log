*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'mul.ll'
source_filename = "mul.cpp"
target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_mul.cpp, i8* null }]

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1)) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}

declare noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16), i32* noundef nonnull align 4 dereferenceable(4)) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8), i32 noundef) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8), %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8)) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #2 = { nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #3 = { nounwind }
attributes #4 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"branch-target-enforcement", i32 0}
!2 = !{i32 1, !"sign-return-address", i32 0}
!3 = !{i32 1, !"sign-return-address-all", i32 0}
!4 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'mul.ll'
source_filename = "mul.cpp"
target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_mul.cpp, i8* null }]

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1)) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}

declare noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16), i32* noundef nonnull align 4 dereferenceable(4)) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8), i32 noundef) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8), %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8)) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #2 = { nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #3 = { nounwind }
attributes #4 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"branch-target-enforcement", i32 0}
!2 = !{i32 1, !"sign-return-address", i32 0}
!3 = !{i32 1, !"sign-return-address-all", i32 0}
!4 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Simplify the CFG (simplifycfg) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Simplify the CFG (simplifycfg) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Loop Data Prefetch (loop-data-prefetch) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Loop Data Prefetch (loop-data-prefetch) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Falkor HW Prefetch Fix (aarch64-falkor-hwpf-fix) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Falkor HW Prefetch Fix (aarch64-falkor-hwpf-fix) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Simplify the CFG (simplifycfg) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Simplify the CFG (simplifycfg) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Loop Data Prefetch (loop-data-prefetch) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Loop Data Prefetch (loop-data-prefetch) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Falkor HW Prefetch Fix (aarch64-falkor-hwpf-fix) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Falkor HW Prefetch Fix (aarch64-falkor-hwpf-fix) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

; Loop:
6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

; Exit blocks
16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

; Loop:
6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

; Exit blocks
16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

; Loop:
6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

; Exit blocks
16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

; Loop:
6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

; Exit blocks
16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Simplify the CFG (simplifycfg) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Simplify the CFG (simplifycfg) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Loop Data Prefetch (loop-data-prefetch) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Loop Data Prefetch (loop-data-prefetch) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Falkor HW Prefetch Fix (aarch64-falkor-hwpf-fix) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Falkor HW Prefetch Fix (aarch64-falkor-hwpf-fix) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before AArch64 Stack Tagging (aarch64-stack-tagging) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After AArch64 Stack Tagging (aarch64-stack-tagging) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Interleaved Load Combine Pass (interleaved-load-combine) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Interleaved Load Combine Pass (interleaved-load-combine) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Type Promotion (type-promotion) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Type Promotion (type-promotion) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before AArch64 Stack Tagging (aarch64-stack-tagging) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After AArch64 Stack Tagging (aarch64-stack-tagging) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Interleaved Load Combine Pass (interleaved-load-combine) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Interleaved Load Combine Pass (interleaved-load-combine) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Type Promotion (type-promotion) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Type Promotion (type-promotion) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before AArch64 Stack Tagging (aarch64-stack-tagging) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After AArch64 Stack Tagging (aarch64-stack-tagging) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Interleaved Load Combine Pass (interleaved-load-combine) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Interleaved Load Combine Pass (interleaved-load-combine) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Type Promotion (type-promotion) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Type Promotion (type-promotion) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before AArch64 Promote Constant (aarch64-promote-const) ***
; ModuleID = 'mul.ll'
source_filename = "mul.cpp"
target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_mul.cpp, i8* null }]

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1)) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}

declare noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16), i32* noundef nonnull align 4 dereferenceable(4)) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8), i32 noundef) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8), %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8)) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #2 = { nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #3 = { nounwind }
attributes #4 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"branch-target-enforcement", i32 0}
!2 = !{i32 1, !"sign-return-address", i32 0}
!3 = !{i32 1, !"sign-return-address-all", i32 0}
!4 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
*** IR Dump After AArch64 Promote Constant (aarch64-promote-const) ***
; ModuleID = 'mul.ll'
source_filename = "mul.cpp"
target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_mul.cpp, i8* null }]

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1)) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}

declare noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16), i32* noundef nonnull align 4 dereferenceable(4)) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8), i32 noundef) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8), %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8)) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #2 = { nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #3 = { nounwind }
attributes #4 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"branch-target-enforcement", i32 0}
!2 = !{i32 1, !"sign-return-address", i32 0}
!3 = !{i32 1, !"sign-return-address-all", i32 0}
!4 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
*** IR Dump Before Merge internal globals (global-merge) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Merge internal globals (global-merge) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}
# *** IR Dump Before AArch64 Instruction Selection (amdgpu-isel) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 Instruction Selection (amdgpu-isel) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr32all = COPY $w0
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 Local Dynamic TLS Access Clean-up (aarch64-local-dynamic-tls-cleanup) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr32all = COPY $w0
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 Local Dynamic TLS Access Clean-up (aarch64-local-dynamic-tls-cleanup) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr32all = COPY $w0
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr32all = COPY $w0
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr32all = COPY $w0
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr32all = COPY $w0
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr32all = COPY $w0
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr32all = COPY $w0
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr32all = COPY $w0
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr32all = COPY $w0
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  %3:gpr32all = COPY $w0
240B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  %3:gpr32all = COPY $w0
240B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr32all = COPY $w0
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr32all = COPY $w0
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr32all = COPY $w0
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr32all = COPY $w0
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 Condition Optimizer (aarch64-condopt) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 Condition Optimizer (aarch64-condopt) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 Conditional Compares (aarch64-ccmp) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 Conditional Compares (aarch64-ccmp) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 Conditional Branch Tuning (aarch64-cond-br-tuning) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 Conditional Branch Tuning (aarch64-cond-br-tuning) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 Store Pair Suppression (aarch64-stp-suppress) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 Store Pair Suppression (aarch64-stp-suppress) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 SIMD instructions optimization pass (aarch64-simdinstr-opt) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 SIMD instructions optimization pass (aarch64-simdinstr-opt) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 Stack Tagging PreRA (aarch64-stack-tagging-pre-ra) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 Stack Tagging PreRA (aarch64-stack-tagging-pre-ra) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 MI Peephole Optimization pass (aarch64-mi-peephole-opt) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 MI Peephole Optimization pass (aarch64-mi-peephole-opt) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 Dead register definitions (aarch64-dead-defs) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 Dead register definitions (aarch64-dead-defs) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY %1:gpr64common
  $x1 = COPY %0:gpr64common
  $x2 = COPY %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY killed %1:gpr64common
  $x1 = COPY killed %0:gpr64common
  $x2 = COPY killed %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function __cxx_global_var_init: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY killed %1:gpr64common
  $x1 = COPY killed %0:gpr64common
  $x2 = COPY killed %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY killed %1:gpr64common
  $x1 = COPY killed %0:gpr64common
  $x2 = COPY killed %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY killed %1:gpr64common
  $x1 = COPY killed %0:gpr64common
  $x2 = COPY killed %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY killed %1:gpr64common
  $x1 = COPY killed %0:gpr64common
  $x2 = COPY killed %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY %0:gpr64common
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x0 = COPY killed %1:gpr64common
  $x1 = COPY killed %0:gpr64common
  $x2 = COPY killed %2:gpr64common
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY killed %1:gpr64common
160B	  $x1 = COPY killed %0:gpr64common
176B	  $x2 = COPY killed %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY killed %1:gpr64common
160B	  $x1 = COPY killed %0:gpr64common
176B	  $x2 = COPY killed %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  %0:gpr64common = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY %0:gpr64common
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  %1:gpr64common = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  %2:gpr64common = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
144B	  $x0 = COPY %1:gpr64common
160B	  $x1 = COPY %0:gpr64common
176B	  $x2 = COPY %2:gpr64common
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY renamable $x19
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
160B	  $x1 = COPY killed renamable $x19
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY renamable $x19
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
160B	  $x1 = COPY killed renamable $x19
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY renamable $x19
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
160B	  $x1 = COPY killed renamable $x19
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY renamable $x19
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
160B	  $x1 = COPY killed renamable $x19
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY renamable $x19
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
160B	  $x1 = COPY killed renamable $x19
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
48B	  $x0 = COPY renamable $x19
64B	  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
80B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
96B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
112B	  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
128B	  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
160B	  $x1 = COPY killed renamable $x19
192B	  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 Redundant Copy Elimination (aarch64-copyelim) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 Redundant Copy Elimination (aarch64-copyelim) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before A57 FP Anti-dependency breaker (aarch64-a57-fp-load-balancing) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After A57 FP Anti-dependency breaker (aarch64-a57-fp-load-balancing) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = COPY renamable $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = COPY killed renamable $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = ORRXrr $xzr, $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = ORRXrr $xzr, killed $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 pseudo instruction expansion pass (aarch64-expand-pseudo) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  renamable $x19 = MOVaddr target-flags(aarch64-page) @_ZStL8__ioinit, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit
  $x0 = ORRXrr $xzr, $x19
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  renamable $x0 = LOADgot target-flags(aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x2 = MOVaddr target-flags(aarch64-page) @__dso_handle, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle
  $x1 = ORRXrr $xzr, killed $x19
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET_ReallyLR

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 pseudo instruction expansion pass (aarch64-expand-pseudo) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 load / store optimization pass (aarch64-ldst-opt) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 load / store optimization pass (aarch64-ldst-opt) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 speculation hardening pass (aarch64-speculation-hardening) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 speculation hardening pass (aarch64-speculation-hardening) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 sls hardening pass (aarch64-sls-hardening) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 sls hardening pass (aarch64-sls-hardening) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Falkor HW Prefetch Fix Late Phase (aarch64-falkor-hwpf-fix-late) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Falkor HW Prefetch Fix Late Phase (aarch64-falkor-hwpf-fix-late) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before PostRA Machine Instruction Scheduler (postmisched) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After PostRA Machine Instruction Scheduler (postmisched) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Workaround A53 erratum 835769 pass (aarch64-fix-cortex-a53-835769-pass) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Workaround A53 erratum 835769 pass (aarch64-fix-cortex-a53-835769-pass) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 Branch Targets (aarch64-branch-targets) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 Branch Targets (aarch64-branch-targets) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Branch relaxation pass (branch-relaxation) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Branch relaxation pass (branch-relaxation) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before AArch64 Compress Jump Tables (aarch64-jump-tables) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After AArch64 Compress Jump Tables (aarch64-jump-tables) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

*** IR Dump Before Merge internal globals (global-merge) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Merge internal globals (global-merge) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}
# *** IR Dump Before AArch64 Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After AArch64 Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 Local Dynamic TLS Access Clean-up (aarch64-local-dynamic-tls-cleanup) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 Local Dynamic TLS Access Clean-up (aarch64-local-dynamic-tls-cleanup) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
64B	  %4:gpr64sp = ADDXri %stack.2, 0, 0
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = COPY %4:gpr64sp
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  %5:gpr64all = COPY $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  %14:gpr64all = COPY $x0
752B	  %10:gpr32 = COPY killed $wzr
768B	  $w0 = COPY %10:gpr32
784B	  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
64B	  %4:gpr64sp = ADDXri %stack.2, 0, 0
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = COPY %4:gpr64sp
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  %5:gpr64all = COPY $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  %14:gpr64all = COPY $x0
752B	  %10:gpr32 = COPY killed $wzr
768B	  $w0 = COPY %10:gpr32
784B	  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 Condition Optimizer (aarch64-condopt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 Condition Optimizer (aarch64-condopt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 Conditional Compares (aarch64-ccmp) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 Conditional Compares (aarch64-ccmp) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 Conditional Branch Tuning (aarch64-cond-br-tuning) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 Conditional Branch Tuning (aarch64-cond-br-tuning) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 Store Pair Suppression (aarch64-stp-suppress) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 Store Pair Suppression (aarch64-stp-suppress) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 SIMD instructions optimization pass (aarch64-simdinstr-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 SIMD instructions optimization pass (aarch64-simdinstr-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 Stack Tagging PreRA (aarch64-stack-tagging-pre-ra) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 Stack Tagging PreRA (aarch64-stack-tagging-pre-ra) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 MI Peephole Optimization pass (aarch64-mi-peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 MI Peephole Optimization pass (aarch64-mi-peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 Dead register definitions (aarch64-dead-defs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 Dead register definitions (aarch64-dead-defs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %5:gpr64all = COPY $x0
  %1:gpr32 = MOVi32imm 2
  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %16:gpr64
  $w1 = COPY %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY %18:gpr64all
  $x1 = COPY %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %14:gpr64all = COPY $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY %10:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui killed %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %3:gpr64
  $x1 = COPY killed %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  dead %5:gpr64all = COPY killed $x0
  %1:gpr32 = MOVi32imm 2
  STRWui killed %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui killed %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed %9:gpr32, killed %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr killed %29:gpr32, killed %28:gpr32, $wzr
  STRWui killed %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri killed %23:gpr32common, 1, 0
  STRWui killed %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui killed %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %16:gpr64
  $w1 = COPY killed %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY killed $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui killed %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %18:gpr64all
  $x1 = COPY killed %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  dead %14:gpr64all = COPY killed $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY killed %10:gpr32
  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui killed %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %3:gpr64
  $x1 = COPY killed %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  dead %5:gpr64all = COPY killed $x0
  %1:gpr32 = MOVi32imm 2
  STRWui killed %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui killed %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed %9:gpr32, killed %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr killed %29:gpr32, killed %28:gpr32, $wzr
  STRWui killed %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri killed %23:gpr32common, 1, 0
  STRWui killed %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui killed %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %16:gpr64
  $w1 = COPY killed %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY killed $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui killed %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %18:gpr64all
  $x1 = COPY killed %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  dead %14:gpr64all = COPY killed $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY killed %10:gpr32
  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui killed %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %3:gpr64
  $x1 = COPY killed %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  dead %5:gpr64all = COPY killed $x0
  %1:gpr32 = MOVi32imm 2
  STRWui killed %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui killed %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed %9:gpr32, killed %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr killed %29:gpr32, killed %28:gpr32, $wzr
  STRWui killed %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri killed %23:gpr32common, 1, 0
  STRWui killed %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui killed %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %16:gpr64
  $w1 = COPY killed %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY killed $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui killed %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %18:gpr64all
  $x1 = COPY killed %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  dead %14:gpr64all = COPY killed $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY killed %10:gpr32
  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui killed %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %3:gpr64
  $x1 = COPY killed %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  dead %5:gpr64all = COPY killed $x0
  %1:gpr32 = MOVi32imm 2
  STRWui killed %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui killed %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed %9:gpr32, killed %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr killed %29:gpr32, killed %28:gpr32, $wzr
  STRWui killed %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri killed %23:gpr32common, 1, 0
  STRWui killed %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui killed %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %16:gpr64
  $w1 = COPY killed %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY killed $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui killed %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %18:gpr64all
  $x1 = COPY killed %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  dead %14:gpr64all = COPY killed $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY killed %10:gpr32
  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui killed %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %3:gpr64
  $x1 = COPY killed %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  dead %5:gpr64all = COPY killed $x0
  %1:gpr32 = MOVi32imm 2
  STRWui killed %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui killed %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed %9:gpr32, killed %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr killed %29:gpr32, killed %28:gpr32, $wzr
  STRWui killed %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri killed %23:gpr32common, 1, 0
  STRWui killed %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui killed %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %16:gpr64
  $w1 = COPY killed %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY killed $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui killed %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %18:gpr64all
  $x1 = COPY killed %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  dead %14:gpr64all = COPY killed $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY killed %10:gpr32
  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  %3:gpr64 = LDRXui killed %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  %4:gpr64sp = ADDXri %stack.2, 0, 0
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %3:gpr64
  $x1 = COPY killed %4:gpr64sp
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  dead %5:gpr64all = COPY killed $x0
  %1:gpr32 = MOVi32imm 2
  STRWui killed %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
  %0:gpr32 = MOVi32imm 1
  STRWui killed %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed %9:gpr32, killed %8:gpr32, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %27:gpr32 = MADDWrrr killed %29:gpr32, killed %28:gpr32, $wzr
  STRWui killed %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  %22:gpr32common = ADDWri killed %23:gpr32common, 1, 0
  STRWui killed %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  %16:gpr64 = LDRXui killed %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %16:gpr64
  $w1 = COPY killed %19:gpr32
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %18:gpr64all = COPY killed $x0
  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  %13:gpr64 = LDRXui killed %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x0 = COPY killed %18:gpr64all
  $x1 = COPY killed %13:gpr64
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  dead %14:gpr64all = COPY killed $x0
  %10:gpr32 = COPY killed $wzr
  $w0 = COPY killed %10:gpr32
  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui killed %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
64B	  %4:gpr64sp = ADDXri %stack.2, 0, 0
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY killed %3:gpr64
112B	  $x1 = COPY killed %4:gpr64sp
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui killed %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui killed %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr killed %9:gpr32, killed %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr killed %29:gpr32, killed %28:gpr32, $wzr
384B	  STRWui killed %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri killed %23:gpr32common, 1, 0
432B	  STRWui killed %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui killed %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY killed %16:gpr64
560B	  $w1 = COPY killed %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui killed %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY killed %18:gpr64all
688B	  $x1 = COPY killed %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
752B	  %10:gpr32 = COPY killed $wzr
768B	  $w0 = COPY killed %10:gpr32
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui killed %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
64B	  %4:gpr64sp = ADDXri %stack.2, 0, 0
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY killed %3:gpr64
112B	  $x1 = COPY killed %4:gpr64sp
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui killed %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui killed %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr killed %9:gpr32, killed %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr killed %29:gpr32, killed %28:gpr32, $wzr
384B	  STRWui killed %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri killed %23:gpr32common, 1, 0
432B	  STRWui killed %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui killed %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY killed %16:gpr64
560B	  $w1 = COPY killed %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui killed %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY killed %18:gpr64all
688B	  $x1 = COPY killed %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
752B	  %10:gpr32 = COPY killed $wzr
768B	  $w0 = COPY killed %10:gpr32
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
64B	  %4:gpr64sp = ADDXri %stack.2, 0, 0
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = COPY %4:gpr64sp
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
752B	  %10:gpr32 = COPY killed $wzr
768B	  $w0 = COPY %10:gpr32
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
64B	  %4:gpr64sp = ADDXri %stack.2, 0, 0
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = COPY %4:gpr64sp
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
752B	  %10:gpr32 = COPY killed $wzr
768B	  $w0 = COPY %10:gpr32
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY killed $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY killed $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY killed $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit killed $w0

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  %2:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  %3:gpr64 = LDRXui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
96B	  $x0 = COPY %3:gpr64
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
160B	  dead %5:gpr64all = COPY $x0
176B	  %1:gpr32 = MOVi32imm 2
192B	  STRWui %1:gpr32, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  %0:gpr32 = MOVi32imm 1
224B	  STRWui %0:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  %9:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  %8:gpr32 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr %9:gpr32, %8:gpr32, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  %29:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  %28:gpr32 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  %27:gpr32 = MADDWrrr %29:gpr32, %28:gpr32, $wzr
384B	  STRWui %27:gpr32, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  %23:gpr32common = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  %22:gpr32common = ADDWri %23:gpr32common, 1, 0
432B	  STRWui %22:gpr32common, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  %19:gpr32 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  %15:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  %16:gpr64 = LDRXui %15:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
544B	  $x0 = COPY %16:gpr64
560B	  $w1 = COPY %19:gpr32
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
608B	  %18:gpr64all = COPY $x0
624B	  %12:gpr64common = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  %13:gpr64 = LDRXui %12:gpr64common, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
672B	  $x0 = COPY %18:gpr64all
688B	  $x1 = COPY %13:gpr64
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
736B	  dead %14:gpr64all = COPY $x0
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
176B	  renamable $w8 = MOVi32imm 2
192B	  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  renamable $w8 = MOVi32imm 1
224B	  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
384B	  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  renamable $w8 = ADDWri killed renamable $w8, 1, 0
432B	  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
624B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
176B	  renamable $w8 = MOVi32imm 2
192B	  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  renamable $w8 = MOVi32imm 1
224B	  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
384B	  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  renamable $w8 = ADDWri killed renamable $w8, 1, 0
432B	  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
624B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
176B	  renamable $w8 = MOVi32imm 2
192B	  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  renamable $w8 = MOVi32imm 1
224B	  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
384B	  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  renamable $w8 = ADDWri killed renamable $w8, 1, 0
432B	  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
624B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
176B	  renamable $w8 = MOVi32imm 2
192B	  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  renamable $w8 = MOVi32imm 1
224B	  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
384B	  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  renamable $w8 = ADDWri killed renamable $w8, 1, 0
432B	  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
624B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
176B	  renamable $w8 = MOVi32imm 2
192B	  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  renamable $w8 = MOVi32imm 1
224B	  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
384B	  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  renamable $w8 = ADDWri killed renamable $w8, 1, 0
432B	  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
624B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
32B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
48B	  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
80B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
112B	  $x1 = ADDXri %stack.2, 0, 0
128B	  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
176B	  renamable $w8 = MOVi32imm 2
192B	  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
208B	  renamable $w8 = MOVi32imm 1
224B	  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

240B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

256B	  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
272B	  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
288B	  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
304B	  Bcc 12, %bb.3, implicit killed $nzcv

320B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.1

336B	  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
352B	  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
368B	  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
384B	  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
400B	  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
416B	  renamable $w8 = ADDWri killed renamable $w8, 1, 0
432B	  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
448B	  B %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.1

480B	  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
496B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
512B	  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
576B	  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
624B	  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
640B	  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
704B	  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
720B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
768B	  $w0 = COPY $wzr
784B	  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 Redundant Copy Elimination (aarch64-copyelim) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 Redundant Copy Elimination (aarch64-copyelim) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before A57 FP Anti-dependency breaker (aarch64-a57-fp-load-balancing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After A57 FP Anti-dependency breaker (aarch64-a57-fp-load-balancing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1

  STRWui $wzr, %stack.0, 0 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  $x1 = ADDXri %stack.2, 0, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui %stack.2, 0 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, %stack.3, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui %stack.1, 0 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, %stack.1, 0 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui %stack.3, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = COPY $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = COPY $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = COPY $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = COPY $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = COPY $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = COPY $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = COPY $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = COPY $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrr $wzr, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 pseudo instruction expansion pass (aarch64-expand-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVi32imm 2
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVi32imm 1
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrr killed renamable $w8, killed renamable $w9, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrr $wzr, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET_ReallyLR implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 pseudo instruction expansion pass (aarch64-expand-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 load / store optimization pass (aarch64-ldst-opt) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 load / store optimization pass (aarch64-ldst-opt) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 speculation hardening pass (aarch64-speculation-hardening) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 speculation hardening pass (aarch64-speculation-hardening) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 sls hardening pass (aarch64-sls-hardening) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 sls hardening pass (aarch64-sls-hardening) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before Falkor HW Prefetch Fix Late Phase (aarch64-falkor-hwpf-fix-late) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After Falkor HW Prefetch Fix Late Phase (aarch64-falkor-hwpf-fix-late) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before PostRA Machine Instruction Scheduler (postmisched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After PostRA Machine Instruction Scheduler (postmisched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before Workaround A53 erratum 835769 pass (aarch64-fix-cortex-a53-835769-pass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After Workaround A53 erratum 835769 pass (aarch64-fix-cortex-a53-835769-pass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 Branch Targets (aarch64-branch-targets) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 Branch Targets (aarch64-branch-targets) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before Branch relaxation pass (branch-relaxation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After Branch relaxation pass (branch-relaxation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before AArch64 Compress Jump Tables (aarch64-jump-tables) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After AArch64 Compress Jump Tables (aarch64-jump-tables) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

*** IR Dump Before Merge internal globals (global-merge) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Merge internal globals (global-merge) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}
# *** IR Dump Before AArch64 Instruction Selection (amdgpu-isel) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 Instruction Selection (amdgpu-isel) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 Local Dynamic TLS Access Clean-up (aarch64-local-dynamic-tls-cleanup) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 Local Dynamic TLS Access Clean-up (aarch64-local-dynamic-tls-cleanup) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 Condition Optimizer (aarch64-condopt) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 Condition Optimizer (aarch64-condopt) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 Conditional Compares (aarch64-ccmp) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 Conditional Compares (aarch64-ccmp) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 Conditional Branch Tuning (aarch64-cond-br-tuning) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 Conditional Branch Tuning (aarch64-cond-br-tuning) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 Store Pair Suppression (aarch64-stp-suppress) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 Store Pair Suppression (aarch64-stp-suppress) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 SIMD instructions optimization pass (aarch64-simdinstr-opt) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 SIMD instructions optimization pass (aarch64-simdinstr-opt) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 Stack Tagging PreRA (aarch64-stack-tagging-pre-ra) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 Stack Tagging PreRA (aarch64-stack-tagging-pre-ra) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 MI Peephole Optimization pass (aarch64-mi-peephole-opt) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 MI Peephole Optimization pass (aarch64-mi-peephole-opt) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 Dead register definitions (aarch64-dead-defs) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 Dead register definitions (aarch64-dead-defs) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
32B	  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
48B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
64B	  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 Redundant Copy Elimination (aarch64-copyelim) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 Redundant Copy Elimination (aarch64-copyelim) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before A57 FP Anti-dependency breaker (aarch64-a57-fp-load-balancing) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After A57 FP Anti-dependency breaker (aarch64-a57-fp-load-balancing) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 pseudo instruction expansion pass (aarch64-expand-pseudo) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET_ReallyLR

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 pseudo instruction expansion pass (aarch64-expand-pseudo) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 load / store optimization pass (aarch64-ldst-opt) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 load / store optimization pass (aarch64-ldst-opt) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 speculation hardening pass (aarch64-speculation-hardening) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 speculation hardening pass (aarch64-speculation-hardening) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 sls hardening pass (aarch64-sls-hardening) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 sls hardening pass (aarch64-sls-hardening) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Falkor HW Prefetch Fix Late Phase (aarch64-falkor-hwpf-fix-late) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Falkor HW Prefetch Fix Late Phase (aarch64-falkor-hwpf-fix-late) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before PostRA Machine Instruction Scheduler (postmisched) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre killed $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After PostRA Machine Instruction Scheduler (postmisched) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Workaround A53 erratum 835769 pass (aarch64-fix-cortex-a53-835769-pass) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Workaround A53 erratum 835769 pass (aarch64-fix-cortex-a53-835769-pass) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 Branch Targets (aarch64-branch-targets) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 Branch Targets (aarch64-branch-targets) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Branch relaxation pass (branch-relaxation) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Branch relaxation pass (branch-relaxation) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before AArch64 Compress Jump Tables (aarch64-jump-tables) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After AArch64 Compress Jump Tables (aarch64-jump-tables) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

*** IR Dump Before Machine Outliner (machine-outliner) ***
; ModuleID = 'mul.ll'
source_filename = "mul.cpp"
target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_mul.cpp, i8* null }]

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1)) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}

declare noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16), i32* noundef nonnull align 4 dereferenceable(4)) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8), i32 noundef) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8), %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8)) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #2 = { nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #3 = { nounwind }
attributes #4 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"branch-target-enforcement", i32 0}
!2 = !{i32 1, !"sign-return-address", i32 0}
!3 = !{i32 1, !"sign-return-address-all", i32 0}
!4 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
*** IR Dump After Machine Outliner (machine-outliner) ***
; ModuleID = 'mul.ll'
source_filename = "mul.cpp"
target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_mul.cpp, i8* null }]

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* noundef nonnull align 1 dereferenceable(1)) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* noundef nonnull align 4 dereferenceable(4) %3)
  store i32 2, i32* %2, align 4
  store i32 1, i32* %4, align 4
  br label %6

6:                                                ; preds = %10, %0
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = mul nsw i32 %11, %12
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %2, align 4
  br label %6, !llvm.loop !10

16:                                               ; preds = %6
  %17 = load i32, i32* %4, align 4
  %18 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %17)
  %19 = call noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8) %18, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
}

declare noundef nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* noundef nonnull align 8 dereferenceable(16), i32* noundef nonnull align 4 dereferenceable(4)) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8), i32 noundef) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8), %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* noundef) #1

declare noundef nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* noundef nonnull align 8 dereferenceable(8)) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_mul.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #2 = { nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }
attributes #3 = { nounwind }
attributes #4 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+outline-atomics,+v8a" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"branch-target-enforcement", i32 0}
!2 = !{i32 1, !"sign-return-address", i32 0}
!3 = !{i32 1, !"sign-return-address-all", i32 0}
!4 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 1}
!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
# *** IR Dump Before Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump After Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function __cxx_global_var_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=16, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]

bb.0 (%ir-block.0):
  liveins: $lr, $x19
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -4 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  frame-setup STRXui killed $x19, $sp, 2 :: (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 32
  frame-setup CFI_INSTRUCTION offset $w19, -16
  frame-setup CFI_INSTRUCTION offset $w30, -24
  frame-setup CFI_INSTRUCTION offset $w29, -32
  $x19 = ADRP target-flags(aarch64-page) @_ZStL8__ioinit
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @_ZStL8__ioinit, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @_ZNSt8ios_base4InitC1Ev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page, aarch64-got) @_ZNSt8ios_base4InitD1Ev
  $x2 = ADRP target-flags(aarch64-page) @__dso_handle
  renamable $x2 = ADDXri killed $x2, target-flags(aarch64-pageoff, aarch64-nc) @__dso_handle, 0
  $x1 = ORRXrs $xzr, killed $x19, 0
  renamable $x0 = LDRXui killed $x0, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZNSt8ios_base4InitD1Ev
  BL @__cxa_atexit, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $x2, implicit-def $sp, implicit-def dead $w0
  $x19 = frame-destroy LDRXui $sp, 2 :: (load (s64) from %stack.0)
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  RET undef $lr

# End machine code for function __cxx_global_var_init.

# *** IR Dump Before Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump After Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-8]
  fi#5: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi $wzr, $fp, -4 :: (store (s32) into %stack.0)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt3cin
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt3cin
  $x1 = ADDXri $sp, 4, 0
  BL @_ZNSirsERi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  renamable $w8 = MOVZWi 2, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  renamable $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w9 = LDRWui $sp, 1 :: (load (s32) from %stack.2)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv
  Bcc 12, %bb.3, implicit killed $nzcv

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.1

  renamable $w8 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $w9 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  STRWui killed renamable $w8, $sp, 0 :: (store (s32) into %stack.3)
  renamable $w8 = LDRWui $sp, 2 :: (load (s32) from %stack.1)
  renamable $w8 = ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store (s32) into %stack.1)
  B %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.1

  renamable $w1 = LDRWui $sp, 0 :: (load (s32) from %stack.3)
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4cout
  renamable $x0 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4cout
  BL @_ZNSolsEi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $x0
  renamable $x8 = ADRP target-flags(aarch64-page, aarch64-got) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  renamable $x1 = LDRXui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-got, aarch64-nc) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
  BL @_ZNSolsEPFRSoS_E, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $x0
  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.5), (load (s64) from %stack.4)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

# *** IR Dump Before Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

# *** IR Dump After Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function _GLOBAL__sub_I_mul.cpp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]

bb.0 (%ir-block.0):
  liveins: $lr
  early-clobber $sp = frame-setup STPXpre $fp, killed $lr, $sp(tied-def 0), -2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
  $fp = frame-setup ADDXri $sp, 0, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  BL @__cxx_global_var_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  early-clobber $sp, $fp, $lr = frame-destroy LDPXpost $sp(tied-def 0), 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
  RET undef $lr

# End machine code for function _GLOBAL__sub_I_mul.cpp.

